{"version":3,"sources":["SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","userInput","event","setState","userSelection","target","value","state","className","htmlFor","onChange","this","type","placeholder","onClick","props","userSubmit","Component","App","preventDefault","secURL","axios","get","then","res","data","hasOwnProperty","alert","weatherData","console","log","cityName","URL","catch","err","weatherUpdate","request","query","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","currentDate","Date","current","temperature","weather_descriptions","src","weather_icons","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yTA6BeA,E,kDAxBX,aAAe,IAAD,8BACV,gBAMJC,UAAY,SAACC,GACT,EAAKC,SAAS,CACVC,cAAeF,EAAMG,OAAOC,SAPhC,EAAKC,MAAQ,CACTH,cAAe,IAHT,E,qDAaJ,IAAD,OACL,OACI,0BAAMI,UAAU,cACZ,2BAAOA,UAAU,UAAUC,QAAQ,iBAAnC,mBACA,2BAAOC,SAAUC,KAAKV,UAAWW,KAAK,OAAOJ,UAAU,aAAaK,YAAY,mBAChF,4BAAQC,QAAS,SAACZ,GAAD,OAAW,EAAKa,MAAMC,WAAWd,EAAO,EAAKK,MAAMH,iBAApE,uB,GAnBQa,aCuGTC,G,wDAjGb,aAAe,IAAD,8BACZ,gBA0BFF,WAAa,SAACd,EAAOD,GAGnB,GAFAC,EAAMiB,iBAEW,KAAdlB,EAAH,CAKA,IAAMmB,EAAM,0DAxCI,mCAwCJ,kBAA2EnB,EAA3E,YAEZoB,IACCC,IAAIF,GACJG,MAAK,SAACC,GACFA,EAAIC,KAAKC,eAAe,SACzBC,MAAM,uBAEN,EAAKxB,SAAS,CACZyB,YAAaJ,EAAIC,OAGrBI,QAAQC,IAAIN,WAhBZG,MAAM,yBA7BR,EAAKpB,MAAQ,CACXqB,YAAa,GACbG,SAAU,IAJA,E,gEAQO,IAAD,OAEZC,EAAG,0DAfO,mCAeP,0BAETX,IACCC,IAAIU,GACJT,MAAK,SAACC,GACL,EAAKrB,SAAS,CACZyB,YAAaJ,EAAIC,KACjBM,SAAU,eAIbE,OAAM,SAAAC,S,+BAiDP,OACA,yBAAK1B,UAAU,OACb,8BAEE,kBAAC,EAAD,CAAWQ,WAAYL,KAAKK,WAAYN,SAAUC,KAAKwB,gBAG7B,KAAxBxB,KAAKJ,MAAMwB,SACT,KACA,yBAAKvB,UAAU,gBACb,yBAAKA,UAAU,YAAYG,KAAKJ,MAAMqB,YAAYQ,QAAQC,OAC1D,yBAAK7B,UAAU,QA3BL,SAAC8B,GACnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAMzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAiBHE,CAAa,IAAIC,OACxC,yBAAKxC,UAAU,eACf,yBAAKA,UAAU,QAAQG,KAAKJ,MAAMqB,YAAYqB,QAAQC,YAAtD,UACA,yBAAK1C,UAAU,WAAWG,KAAKJ,MAAMqB,YAAYqB,QAAQE,qBAAqB,IAC9E,yBAAKC,IAAKzC,KAAKJ,MAAMqB,YAAYqB,QAAQI,cAAc,GAAIC,IAAI,c,GAvF3DrC,cCIEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.ba5df919.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass SearchBox extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userSelection: ''\r\n        }\r\n    }\r\n\r\n    userInput = (event) => {\r\n        this.setState({\r\n            userSelection: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"search-box\">\r\n                <label className=\"sr-only\" htmlFor=\"weatherOutput\">Enter City Name</label>\r\n                <input onChange={this.userInput} type=\"text\" className=\"search-bar\" placeholder=\"Search City...\"/>\r\n                <button onClick={(event) => this.props.userSubmit(event, this.state.userSelection)}>Search Weather</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport SearchBox from './SearchBox';\nimport './App.css';\n\nconst WEATHER_KEY = '45962206e241477700e0f4b9ce3f5897';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      weatherData: {},\n      cityName: ''\n    }  \n  }\n\n  componentDidMount() {\n    \n    const URL = `https://api.weatherstack.com/current?access_key=${WEATHER_KEY}&query=toronto&units=m`\n\n    axios\n    .get(URL)\n    .then((res) => {\n      this.setState({\n        weatherData: res.data,\n        cityName: 'toronto'\n      })\n      \n    })\n    .catch(err => {\n      if (err);\n    })\n  }\n\n\n  userSubmit = (event, userInput) => {\n    event.preventDefault();\n\n    if(userInput === \"\") {\n      alert(\"Input field required\");\n      return;\n    }\n\n    const secURL = `https://api.weatherstack.com/current?access_key=${WEATHER_KEY}&query=${userInput}&units=m`\n    \n    axios\n    .get(secURL)\n    .then((res) => {\n      if(res.data.hasOwnProperty('error')) {\n        alert(\"City does not exist\")\n      } else {\n        this.setState({\n          weatherData: res.data\n        })\n      }\n      console.log(res);\n    })\n  }\n\n\n  render() {\n\n    const currentDate = (d) => {\n      let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n      let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n      let day = days[d.getDay()];\n      let date = d.getDate();\n      let month = months[d.getMonth()];\n      let year = d.getFullYear();\n\n      return `${day} ${date} ${month} ${year}`\n    }\n\n    \n\n\n    return (\n    <div className=\"app\">\n      <main>\n\n        <SearchBox userSubmit={this.userSubmit} onChange={this.weatherUpdate}/>\n\n        {\n          this.state.cityName === ''\n          ? null\n          : <div className=\"location-box\">\n              <div className=\"location\">{this.state.weatherData.request.query}</div>\n              <div className=\"date\">{currentDate (new Date())}</div>\n              <div className=\"weather-box\">\n              <div className=\"temp\">{this.state.weatherData.current.temperature}â„ƒ</div>\n              <div className=\"weather\">{this.state.weatherData.current.weather_descriptions[0]}</div>\n              <img src={this.state.weatherData.current.weather_icons[0]} alt=\"#\"/>\n              </div>\n            </div>\n        }\n\n      </main>\n    </div>\n    );\n  }\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}